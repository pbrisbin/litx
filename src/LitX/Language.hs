module LitX.Language
    ( Language(..)
    , languageCodeBlockTag
    , languageExecuteOptions
    , readLanguage
    , showLanguage
    , showAllLanguages
    , defaultLanguage
    ) where

import LitX.Prelude

import Data.Aeson
import Data.List (intercalate)
import Data.Version
import LitX.CodeBlock
import LitX.Execute
import qualified Paths_litx as Pkg

data Language = Bash
    deriving stock (Eq, Ord, Enum, Bounded)

instance ToJSON Language where
    toJSON = toJSON . showLanguage
    toEncoding = toEncoding . showLanguage

languageCodeBlockTag :: Language -> Text
languageCodeBlockTag = \case
    Bash -> "bash"

languageExecuteOptions :: Language -> Dual (Endo ExecuteOptions)
languageExecuteOptions = Dual . Endo . \case
    Bash ->
        (filterL .~ Filter ((== languageCodeBlockTag Bash) . codeBlockTag))
            . (shebangL .~ "/usr/bin/env bash")
            . (bannerL ?~ ("#\n# " <> generatedBy <> "\n#\n###"))
            . (preambleL ?~ "set -euo pipefail")
            . (commentCharsL .~ "#")
            . (executeModeL .~ Execute "bash")
            . (executeArgsL .~ ["-s", "-"])

readLanguage :: String -> Either String Language
readLanguage = \case
    "bash" -> Right Bash
    x ->
        Left
            $ "Invalid language ("
            <> show x
            <> "), must be "
            <> showAllLanguages

showLanguage :: Language -> String
showLanguage = \case
    Bash -> "bash"

showAllLanguages :: String
showAllLanguages = intercalate "|" $ map showLanguage [minBound .. maxBound]

defaultLanguage :: Language
defaultLanguage = Bash

generatedBy :: Text
generatedBy = "Generated by litx-v" <> pack (showVersion Pkg.version) <> "."
